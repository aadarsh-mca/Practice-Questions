Day 1
1. Create NEW workspace for advance java
2. import day1.1 in your new workspace
3. Edit the location of mysql connector jar 
(Its supplied in - "day1-data\help\jdbc help\jdbc drivers\mysql-connector-j-8.0.33.jar")
4. Revise 
-TestConnection.java 
 for establishing singleton DB connection
- DisplayUserDetails.java
 for Statement n ResultSet processing
- TestPreparedStatement.java
 for PreparedStatement n ResultSet processing

5. As hands on 
Mandatory 
- try solving above objectives , completely from scratch.

Optional exercise
Display user details (id , first name , last name ,dob) for specific role , sorted in desc order as per dob.

6. Mandatory reading H.W
"day1-data\help\day1-sequence.rtf"
"day1-data\help\jdbc help\readmes\JDBC sequence.txt"
"day1-data\help\JDBC objectives n steps.txt"
Diagrams - 
"day1-data\help\jdbc help\diagrams\jdbc-whiteboard.png"
"day1-data\help\jdbc help\diagrams\jdbc overview.png"
"day1-data\help\jdbc help\diagrams\ORM overview.png"
"day1-data\help\jdbc help\diagrams\DB Layers.png"


Day 2 (Morning)

1. import day2.1 in your workspace
1.1 Edit classpath for mysql connector jar
1.2 Edit DBUtils - password
1.3 Revise user sign up

2. Copy flights table n its records in DB
Refer - "day2_help\flights.sql.rtf"

Solve - 
2.1 Display available flights in the asc order of price
User  inputs
Source , destination , departure date 
Display available flights in the asc order of price
Table - flights
POJO - Flight
DBUtils - copy
DAO i/f
List<Flight> getAvailableFlights(Source , destination , departure date ) throws SQLException
DAO Impl class
fields - cn , pst1
ctor - open cn , create pst1
clean up - close psts n cn
CRUD method - set IN params , exec query -> RST -> List<Flight> 
Tester dao instance , dao clean up , call DAO' method

2.2 
Add stops to specific flight n modify arrival time (chage route information)
User Inputs - flight id , no of stops , arrival time

Table - flights
POJO - Flight
DBUtils - copy
DAO i/f
String modifyFlightDetails(flight id , no of stops , arrival time)throws SQLException
DAO Impl class
fields - cn , pst1, pst2
ctor - open cn , create pst1,pst2
clean up - close psts n cn
CRUD method - set IN params , exec update -> update count -> chk it with 1 -> ret mesg
Tester dao instance , dao clean up , call DAO' method

2.3 
Delete flight details by airline n route(source n destination)
User Inputs - airline , source , destination

Table - flights
POJO - Flight
DBUtils - copy
DAO i/f
String deleteFlightRoutes(airline , source , destination)throws SQLException
DAO Impl class
fields - cn , pst1, pst2,pst3
ctor - open cn , create pst1:select,pst2:update,pst3: delete query
clean up - close psts n cn
CRUD method - set IN params , exec update -> update count ->  ret mesg , saying how many routes are cancelled

Tester dao instance , dao clean up , call DAO' method

Day 2 (evening)

1. Add Apache Tomcat web server (9.0.88) in the new workspace (created for web java)
Refer - "day2_eve_data\day2_help\Development Steps.txt"

2. Create dynamic web project 
eg - test_web

3. Add index.html under <src>/<main>/<webapp> folder

4. Run web appliction on the server n test the response on external brwoser
(chrome | edge)

5. Complete pending JDBC tasks

6. Refer to stored function 
Refer - "day1-data\help\jdbc help\sql\sql cmds.txt" to add "accounts" table DDL n copy stored function.
Execute it from JDBC application with layers
Tester - DAO - POJO - DBUtils - DB



===================================



Day 3 (morning)

1. Create dynamic web project (day3_lab) . Test it with HTML(index.html) contents.
2. Create n deploy the servlet using annotation.
(Understand annotation)
3. Create n deploy the servlet using xml tags
4.  Create 1 servlet with default (lazy) loading n another one with eager loading.
Compare these two.

5. Servlet JDBC integration
(Objective - User signin)

6. Mandatory Hands on
Display available flights.

7. Page Navigation 
redirect scenario

