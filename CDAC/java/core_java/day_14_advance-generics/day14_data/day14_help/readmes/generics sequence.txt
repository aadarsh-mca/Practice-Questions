1. Generic Method 
What is it ? A Method which has it's own type parameter.
Can it exist in a non generic class? : Yes

Generic method example : Arrays.toList , Collections.sort
java.util.Arrays - non generic class
Generic method from a non generic class(Arrays)
public static <T>  List<T> asList(T... a)
Type declaration fits between method modifiers n ret type

i/p : T... a : This method can accept : no args or T[] or T t1,T t2....
o/p : FIXED size list
How will you use it for getting a fixed size List<Integer>
int[] data={10,1,2,3,4,5,67,11}


  List<Double> .....

Another example : Collections class : non generic class
public static <T extends Comparable<? super T>> void sort​(List<T> list)
------------------------

Create a non generic class - GenericUtils
Add a public static method(printElements)
- which will print all the elements from ANY type List as well as any type of the Set

Tester - test cases 
AL<Integer> | Vector<String> | LinkedList<Fruit>
HS | LHS | TS of any type .


What will happen ?

Fruit fruit = new Mango(...);
fruit.taste();
fruit=new Apple(...);
fruit.taste();

List<Fruit> fruits=new ArrayList<>();
List<Apple> apples=new ArrayList<>();
fruits=apples;
List<Object> objects=new ArrayList<>();

objects=fruits;
objects=apples;

---------------------
Collections class method
public static void shuffle​(List<?> list)
Randomly permutes the specified list 
Use this method to shuffle : List - 10,20,30,40,50
List - "df" ,"dfg" ,"657","hgd","AADFG"
-------------------------------
Add a static  method in the GenericUtils class - to print taste of ANY fruit added in any Type of Set

Test cases 
HS <Mango> 
| LHS <Apple>
 | TS <Orange>
eg - printTastes 


Bounds in Generics
extends - to represent upper bound
super - to represent lower bound

? extends T => T or any sub type of T  (co variance) - narrowing 
? super T => T or any of its super type (contra variance) - widening
when  to use which one ?
PECS - Producer extends Consumer super
BY default , generic type are invariant 
Meaning - List<T> - 
List<Fruit> --- can NOT be substitues to AL<Mango>
eg - List<Fruit> fruits=new AL<Mango>();//javac error !
List<Fruit> fruits=new AL<Object>();//javac error !

If you want access(read only| get) the elements from any Collection- use extends

If you to add the elements(write only) to any collection - super keyword.
eg - ArrayList<E> 
Ctor - ArrayList<E>(Collection <? extends E> collection)
E - Fruit
Meaning - It creates populated AL <Fruit> from
ANY Collection (any List or Set implementation class)
of ANY data type - Fruit or any sub type

Q - ArrayList<Fruit>
What are legal arguments ?
1. List<Mango>
2. Set<Apple>
3. List<Object>
4. Map<Integer,Mango>
5. HashSet<Orange>
6. TreeSet<Mango>
Ans - 1 ,2,5,6

Collections class method - 
public static <T> boolean addAll​(Collection<? super T> c, T... elements)
Adds all of the specified elements to the specified collection.
In above case - Collection acts as - target (Consumer) - elems will be added to it.
so using super keyword here.
T - Emp 
Q . Choose legal options
1. Collections.addAll - List<Emp> list , mgr instances
Collections.addAll(empList,m1,m2,m3);

2. Collections.addAll - List<Object> list , worker instances
Collections.addAll(objList,w1,w2,w3);


3. Collections.addAll - List<Emp> list , objects
Collections.addAll(empList,o1,o2,o3);

4. Collections.addAll - List<Object> list , emps
Collections.addAll(objList,e1,e2,e3);

Ans - 1, 2 , 4




































 




























2. More about generic syntax : ? , extends ,super
Given :
Emp <---- Mgr <----SalesMgr
Emp <---- Worker <---- TempWorker


What will happen ?
Emp e =new Mgr();
e.computeSalary();
e=new TempWorker();
e.computeSalary();



ArrayList<Emp> l1=new ArrayList<>();//what's the inferred type of the RHS ? :
ArrayList<Mgr> l2=new ArrayList<>();//what's the inferred type of the RHS ? : 
l1=l2; //what will happen ?
Object o=new Mgr();
ArrayList<Object> l3=new ArrayList<>();//what's the inferred type of the RHS ? : 
l3=l2; //what will happen ?
l3=l1; //what will happen ?

What does it imply ?
Does inheritance in generics work in the same manner as learnt earlier ?

Wild card in generics comes to the rescue!
Enter "?"
What is it ? 
It's a wild card in generic syntax. Can be replaced by ANY type.
Represents any unknown type.

Now what will happen ?
ArrayList<?> l1=new ArrayList<>();//what's the implicit type of the RHS ? : 
ArrayList<Mgr> l2=new ArrayList<>();
l1=l2;

? : is referred to as un bounded wild card.


Hands on
1. Shuffle all the elements of the list randomly.
Collections class Method
public static void shuffle​(List<?> list)

2. Collections class
reverse method

3. Write a static method in GenericUtils class : to print elements of ANY List(ArrayList/LinkedList/Vector) of ANY type

Test it with tester : AL<Integer> , LinkedList<String>,Vector<Double> ....

4. Add "computeTotalSalary" method in Emp based hierarchy
Add static method in GenericUtils class which can accept ANY List(AL/LL/Vector) of any type of emps(Emp /Mgr / SalesMgr / Worker/ TempWorker) , computes salary of all of emps supplied via list.

Test it with tester : AL<Mgr> , Vector<HRMgr> , LinkedList<TempWorker>.....

eg : 
public static void computeSalOfEmpList(List<Emp> emps)
{
   for (Emp e : emps)
   sop(e.computeSalary());
}

Tester class 
AL<Mgr> mgrs=new AL<>();
mgrs.add(m1);mgrs.add(m2);mgrs.add(m3);mgrs.add(m4);
computeSalOfEmpList(mgrs);

& compute salary.


3. Write a method to Find max number from List of any numbers (integer / float / double ...) n return it to the caller.
 (Lab exercise)

4. Write a method to Find max element from numbers / strings/ dates
Lab Exercise

5. Write a method that counts the number of elements (stored in Collection) that are greater than a specified element elem.
eg : Count no of strings in a collection of strings > specified string (i.e as per lexicographical ordering)
Count no of doubles  in a collection of doubles > specified double value
Count no of dates in a collection of dates > specified date (i.e after a specified date)
...



6. eg of bounded type in Collection Framework
ArrayList<E> : generic class
public ArrayList​(Collection<? extends E> c)
E : Emp 
? extends Emp
Meaning : This ctor will create a non-empty AL of Emp type , from AL/LL/Vector/HS/LHS/TS (any Collection imple class) , from any type : Emp or it's sub type
Q : Will you be able populate AL<Mgr> from 
1. AL<Emp>
2. HS<Worker>
3. LL<SalesMgr>
4. Vector<Fruit>
5. TS<Object>
6. LHS<HRMgr>
Ans : 




Generic syntax :
? : wild card in generic syntax (it can be replaced by ANY type) : un bounded wild card , represents unknown type

extends : Represents upper bound

super : Represents lower bound


? extends E : ANY type E or its sub type 
? super E : E or its super type
eg : ? extends Emp => Emp or it's sub type(Mgr,Worker.....)
? super Mgr => Mgr or it's super type (Emp , Object)


7. Write a generic method to add all of the specified elements to the specified List.
eg - Add variable no of  fruits (Mango/Apple/Orange) to the Fruit Basket of type any List 
Add any emp(Mgr/Worker/SalesMgr/TempWorker ..) to any List 


What will happen ? (javac error or no error?)
1. Vector<Mgr> mgrs=new Vector<>();
mgs.add(m1)....m10
ArrayList<Emp> emps=new AL<>(mgrs);

2. HashSet<HRMgr> hrMgrs=new HS<>();
hrMgrs.add(hrm1)....hrm10
ArrayList<Emp> emps=new AL<>(hrMgrs);
3.
ArrayList<Mgr> mgrs=new AL<>();
mgrs.add(m1).....m10
LinkedList<HRMgr> hrMgrs=new LinkedList<>(mgrs);

Ans this !
ArrayList<Mgr> mgrs=new AL<>();
mgrs.add(m1).....m10
ArrayList<? extends Emp> emp=new AL<>(mgrs);
ArrayList<? extends Object> objs=mgrs;



3.Collections class(Non generic class) :  Can contain a generic Method
eg : super keyword in generics : lower bound
Method of Collections class
public static <T> void sort(List<T> list,Comparator<? super T> c)
generic method : 
where does type declaration fit ? : It's placed between method modifiers n ret type
1st arg : List<T> list : You can pass List of ANY type (eg : AL/LL/Vector : ??
HS/LHS/TS : ??
HM/LHM/TM : ??) : 
Can you pass List of the following types :  
T --Customer , Student(extends Person) , BankAccount,Flight, Movie,Person , DacStudent (extends Student)
if above classes have not imple Comparable or Comparator : 

2nd arg : Comparator<? super T> c
Instance of the class which imple Comparator
eg : Collections.sort(studentList,comp);//comp : imple Comparator<Student> 
 Collections.sort(studentList,comp);//comp : imple Comaprator<Fruit> 
Collections.sort(studentList,comp);//comp : imple Comaprator<Person> 
Collections.sort(studentList,comp);//comp : imple Comaprator<Object> 
Collections.sort(studentList,comp);//comp : imple Comaprator<eDacStudent> 

------------------Read Later-----------------
More Details

? : wild card (represents ANY unknown type) => un bounded wildcard

extends => upper bound (type of the upper bound super class / interface)
If your collection(list/set/map) is acting as a producer (of data) i.e while using retrieve operation, use upper bound
eg : ? extends Number => Number or it's subtype (Byte,Short.....Double)
get : type of the data that you get  Number or it's subtype, BUT you can't add Integer , if it's collection of Double
Can be accessed using Number type of the ref.
(Producer extends)

super : lower bound
? super T => T or it's super type
Use it whenever your collection is acting as a consumer (data sink) : i.e wheneve you want to add data , to a collection.
(Consumer super)



1. Solve generic questions

2. Solve (Lab work)
Collections class API
public static <T> void copy​(List<? super T> dest, List<? extends T> src)

If you consider Emp<---Mgr <---- SalesMgr

Which of the following is valid ?
1. You should be able to copy SalesMgr type of refs into Emp type of the list
2. You should be able to copy SalesMgr type of refs into Mgr type of the list
3. You should be able to copy Emp  type of refs into Mgr type of the list 
4. You should be able to copy Mgr type of refs into SalesMgr type of the list 

It means
If src type of the list for copying is  SalesMgr (i.e you have a list of SalesMgrs)
dest  type of the list for copy should be  ????

If src type of the list for copying is  Mgr
dest  type of the list for copy should be  ????

If src type of the list for copying is  Emp
dest  type of the list for copy should be  ????

If the dest type of the list Mgr 
src type of the list should be ???



----------------
What is the difference between a wildcard bound and a type parameter bound?

A wildcard can have only one bound, while a type parameter can have several bounds. 

A wildcard can have a lower or an upper bound, while there is no such thing as a lower bound for a type parameter. 

Wildcard bounds and type parameter bounds are often confused, because they are both called bounds and have in part similar syntax. 

Example (of type parameter bound and wildcard bound): 

class Box< T extends Appendable & Flushable > {
  private T theObject;
  public Box(T arg)                { theObject = arg; } 
  public Box(Box< ? extends T > box) { theObject = box.theObject; }
  ...
}

