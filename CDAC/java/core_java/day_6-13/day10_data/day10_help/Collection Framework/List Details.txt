List<E> features
1. List represents ordered collection --- order is significant(It remembers the order of insertion)
2. Allows null references
3. Allows duplicates
4. Supports index based operation

List<E> interface Methods
1. add methods
1.1 boolean add(E e)  - append
1.2 void add(int index,E e) - 
- inserts the element at the specified index.
- valid range of index : 0 - (size-1) , otherwise JVM throws 
  IndexOutOfBoundsException

1.3 void addAll(Collection<E> e) 
 - bulk append operation , to append elements from ANY Collection to this List.
Q - Which of the following are the legal options for addAll?
Options
1. ArrayList,LinkedList,Vector
2. HashSet,LinkedHashSet,TreeSet
3. HashMap,LinkedHashMap,TreeMap

Ans -1, 2



2. Retrieve specific element from list 

E get(int index)
index ranges from : 0 -(size-1)
Otherwise throws - 
java.lang.IndexOutOfBoundsException

3. display list contents 
3.1 public String toString()
3.2 Attach explicit Iterator
3.3 Attach for-each
3.4 Attach for loop

4. Search for a particular element in list
boolean contains(Object o)
NOTE : Based upon equals method of the type of the List
Important - Argument of the contains method = type of the List
eg : List<BankAccount> , arg - BankAccount
List<Emp> , arg - Emp
Tips for the correct working -
1. override equals method based upon UID (PK)
2. Add overloaded concstructor to wrap UID.


5. Searching for 1st occurrence of the element in the list
int indexOf(Object o)
rets index of 1st occurrence of specified element  Rets -1 if element not found.
NOTE : Based upon equals method of the type of the List


6.Searching for last occurrence 
int lastIndexOf(Object o)
rets index of last occurrence of specified element  Rets -1 if element not found.
NOTE : Based upon equals method of the type of the List


7. To replace the element -
E set(int index,E newElem)
Replaces old element at spepcified index by new element
Returns old element


8. Remove methods
8.1 Remove by index - 
E remove(int index) 
- Removes the element at specified index & returns removed element

8.2 Remove by element
boolean  remove(Object o) 
- Removes the specified element 
- Rets true , if element is removed or otherwise false .

9. conversion from collection to array
9.1 Object[] toArray() 
 - non generic version 
 - rets array of objects(references)

9.2 T[] toArray(T[] array)
T = type of collection .
Rets array of actual type.


List implementation classes -
1. ArrayList<E> - generic List implementation class , based upon growable array.
Constructors
1. ArrayList<E>()
-Default ctor 
-Creates empty ArrayList , size=0, init capa=10

2. ArrayList<E>(int initCapacity)
- Creates empty ArrayList , size=0, specified init capa.
eg - ArrayList<Emp> emps=new ArrayList<>(100);
emps.add(e1);.....emps.add(e100);
emps.add(e101);

3. ArrayList<E> (Collection<E> collection)
- Creates a list populated from ANY Collection.
size = collection.size()
capacity - as per JVM














